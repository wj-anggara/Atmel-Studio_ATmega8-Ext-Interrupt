
Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000102  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000539  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004ca  00000000  00000000  000006d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001e8  00000000  00000000  00000b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00000d84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d0  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000010e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	19 d0       	rcall	.+50     	; 0x76 <main>
  44:	22 c0       	rjmp	.+68     	; 0x8a <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_2>:
#include <util/delay.h>

int a=0;

ISR(INT1_vect)
{
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	8f 93       	push	r24
  54:	9f 93       	push	r25
	a++;
  56:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  5a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  5e:	01 96       	adiw	r24, 0x01	; 1
  60:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  64:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
  68:	9f 91       	pop	r25
  6a:	8f 91       	pop	r24
  6c:	0f 90       	pop	r0
  6e:	0f be       	out	0x3f, r0	; 63
  70:	0f 90       	pop	r0
  72:	1f 90       	pop	r1
  74:	18 95       	reti

00000076 <main>:

int main(void)
{
    DDRD &= ~(1<<DD3);						//INPUT
  76:	8b 98       	cbi	0x11, 3	; 17
    PORTD |= (1<<PD3);						//PULL_UP
  78:	93 9a       	sbi	0x12, 3	; 18
    MCUCR |= (1<<ISC11) | (1<<ISC10);		// set INT1 to trigger on Falling
  7a:	85 b7       	in	r24, 0x35	; 53
  7c:	8c 60       	ori	r24, 0x0C	; 12
  7e:	85 bf       	out	0x35, r24	; 53
    GICR |= (1<<INT1);						// Turns on INT1
  80:	8b b7       	in	r24, 0x3b	; 59
  82:	80 68       	ori	r24, 0x80	; 128
  84:	8b bf       	out	0x3b, r24	; 59
    sei();									// turn on interrupts
  86:	78 94       	sei
	
    while (1) 
    {
    }
  88:	ff cf       	rjmp	.-2      	; 0x88 <main+0x12>

0000008a <_exit>:
  8a:	f8 94       	cli

0000008c <__stop_program>:
  8c:	ff cf       	rjmp	.-2      	; 0x8c <__stop_program>
